{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n// export const productcartSlice = createSlice({\n//   name: \"cartitems\",\n//   initialState: {\n//     cartproducts: [],\n//   },\n//   reducers: {\n//     cartproductsList: (state, action) => {\n//       state.cartproducts = action.payload;\n//     },\n//     removecartProductsState: (state) => {\n//       state.cartproducts = [];\n//     },\n//     updatecartProducts: (state, action) => {\n//        if(state.cartproducts!=null){\n//          state.cartproducts.push(action.payload);\n//       }\n//       else{\n//         state.cartproducts=action.payload;\n//       }\n//     },\n//   },\n// });\n// export const {\n//   cartproductsList,\n//   removecartProductsState,\n//   updatecartProducts,\n// } = productcartSlice.actions;\n// export const getcartProducts = (state) => state.cart.cartproducts;\n// export default productcartSlice.reducer;\nimport { createSlice } from \"@reduxjs/toolkit\";\nexport const cartItemsSlice = createSlice({\n  name: \"cartItems\",\n  initialState: {\n    cartItems: [],\n    finalCart: []\n  },\n  reducers: {\n    // by id\n    createCartItem: (state, action) => {\n      const exist = state.cartItems.findIndex(ele => ele.itemId === action.payload.itemId);\n      console.log(exist + \"----------------------------: exist\");\n\n      if (exist !== -1) {\n        state.cartItems[exist] = { ...state.cartItems[exist],\n          ...action.payload\n        };\n      } else {\n        state.cartItems.push(action.payload);\n      }\n    },\n    removeCartItem: (state, action) => {\n      console.log(\"----------------------------: deleted\" + action.payload);\n      let index = state.cartItems.findIndex(_ref => {\n        let {\n          id\n        } = _ref;\n        return id === action.payload.id;\n      });\n      state.cartItems.splice(index, 1); // state.cartItems.splice(action.payload, 1);\n      // const item = state.cartItems.filter(\n      //   (ele) => ele.itemId === action.payload\n      // );\n      //   state.cartProducts = null;\n      // console.log(item + \"----------------------------: deleted\");\n    },\n    updateCartItem: (state, action) => {\n      state.cartItems = action.payload;\n    },\n    createFinalCart: (state, action) => {\n      const exist = state.cartItems.findIndex(ele => ele.itemId === action.payload.itemId);\n      console.log(exist + \"----------------------------: exist\");\n\n      if (exist !== -1) {\n        state.cartItems[exist] = { ...state.cartItems[exist],\n          ...action.payload\n        };\n      } else {\n        state.cartItems.push(action.payload);\n      }\n    }\n  }\n});\nexport const {\n  createCartItem,\n  removeCartItem,\n  updateCartItem,\n  createFinalCart\n} = cartItemsSlice.actions;\nexport const getCartItems = state => state.cartItem.cartItems;\nexport const getFinalCart = state => state.cart.finalCart;\nexport default cartItemsSlice.reducer;","map":{"version":3,"sources":["/Users/ramya/Documents/lab1/etsy/etsyfrontend/src/features/cartItemsSlice.js"],"names":["createSlice","cartItemsSlice","name","initialState","cartItems","finalCart","reducers","createCartItem","state","action","exist","findIndex","ele","itemId","payload","console","log","push","removeCartItem","index","id","splice","updateCartItem","createFinalCart","actions","getCartItems","cartItem","getFinalCart","cart","reducer"],"mappings":"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","sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\n\n// export const productcartSlice = createSlice({\n//   name: \"cartitems\",\n//   initialState: {\n//     cartproducts: [],\n//   },\n//   reducers: {\n//     cartproductsList: (state, action) => {\n//       state.cartproducts = action.payload;\n//     },\n//     removecartProductsState: (state) => {\n//       state.cartproducts = [];\n//     },\n//     updatecartProducts: (state, action) => {\n//        if(state.cartproducts!=null){\n//          state.cartproducts.push(action.payload);\n//       }\n//       else{\n//         state.cartproducts=action.payload;\n//       }\n      \n//     },\n   \n    \n   \n//   },\n// });\n\n// export const {\n//   cartproductsList,\n//   removecartProductsState,\n//   updatecartProducts,\n\n// } = productcartSlice.actions;\n\n// export const getcartProducts = (state) => state.cart.cartproducts;\n\n// export default productcartSlice.reducer;\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nexport const cartItemsSlice = createSlice({\n  name: \"cartItems\",\n  initialState: {\n    cartItems: [],\n    finalCart: [],\n  },\n  reducers: {\n    // by id\n    createCartItem: (state, action) => {\n      const exist = state.cartItems.findIndex(\n        (ele) => ele.itemId === action.payload.itemId\n      );\n      console.log(exist + \"----------------------------: exist\");\n      if (exist !== -1) {\n        state.cartItems[exist] = {\n          ...state.cartItems[exist],\n          ...action.payload,\n        };\n      } else {\n        state.cartItems.push(action.payload);\n      }\n    },\n    removeCartItem: (state, action) => {\n      console.log(\"----------------------------: deleted\" + action.payload);\n      let index = state.cartItems.findIndex(\n        ({ id }) => id === action.payload.id\n      );\n      state.cartItems.splice(index, 1);\n      // state.cartItems.splice(action.payload, 1);\n      // const item = state.cartItems.filter(\n      //   (ele) => ele.itemId === action.payload\n      // );\n      //   state.cartProducts = null;\n      // console.log(item + \"----------------------------: deleted\");\n    },\n    updateCartItem: (state, action) => {\n      state.cartItems = action.payload;\n    },\n\n    createFinalCart: (state, action) => {\n      const exist = state.cartItems.findIndex(\n        (ele) => ele.itemId === action.payload.itemId\n      );\n      console.log(exist + \"----------------------------: exist\");\n      if (exist !== -1) {\n        state.cartItems[exist] = {\n          ...state.cartItems[exist],\n          ...action.payload,\n        };\n      } else {\n        state.cartItems.push(action.payload);\n      }\n    },\n  },\n});\n\nexport const {\n  createCartItem,\n  removeCartItem,\n  updateCartItem,\n  createFinalCart,\n} = cartItemsSlice.actions;\n\nexport const getCartItems = (state) => state.cartItem.cartItems;\nexport const getFinalCart = (state) => state.cart.finalCart;\n\nexport default cartItemsSlice.reducer;"]},"metadata":{},"sourceType":"module"}